# ENV setup
>cmd ma new project folder name
> virtualenv -p path venv (path = C:\Users\santo\AppData\Local\Programs\Python\Python37-32\python.exe)
>source venv/bin/activate (for mac/linux)
    venv\Scripts\activate (for WINs)
> (venv) E:\.. > pip install django
>pip freeze > requirements.txt

#Django works in MVT( model, view and Template format)
client request at view and performs operation at model(DB) and responce and gives result at Templete

#Django Command
>django-admin (help)
>django-admin startproject Blog_project . (if . skipped, it just make fodler, dot with manage.py is made)
    >dir Blog_project
    __init__.py, settings.py, urls.py, wsgi.py

    __init__.py:  its just make the package
    wsgi.py : treat like servers to interact
    urls.py : url ko direction,loc
    setting.py : imp part,
        BASE_DIR : return the base dir
        SECRET_KEY : for confidential value , encryption(50 length ko)
        DEBUG : bool value, if Error print or not ( dev ma True and prod ma False)
        ALLOWED_HOSTS =[]: list domain name or ip by default, its localhost
        INSTALLED_APPS =[..]: list of pages
        MIDDLEWARE =[..] pages lai link garaune with security,
            srfview : form ko input value validate
        ROOT_URLCONF : always one, define the patterns
        TEMPLATES :
        WSGI_APPLICATION : defines which server to use
        DATABASE : modal
        AUTH_PASSWORD_VALIDATORS : password banauda ko conventions haru


> open pycharm terminal
    make a file .gitignore then type .idea/ , .venv    to ignore in to git track
> git add, commit garnee
> git remote -v is blank so make a repo in github
then
>git remote add origin repo url
>git push -u origin master


#RUN ( venv must active "(venv) E:\learning\DjangoProject>")
>python manage.py runserver
    then Browser ma "http://127.0.0.1:8000/admin/" > ctrl + C if to quit
>db has no table so > python manage.py migrate
#super user
>python manage.py createsuperuser


#APP creation
>"pip install requests" send request to then add to requirements.txt  add garne
>"python manage.py startapp cryptoc" cryptoc is the name of app
(migration le modal and DB lai glue gar6)
> for templete creates a templete folder in cryptoc
view and templates transfiton lai context which is  dictionary
> templates folder ma ma html code hun6
> setting.py and url.py  milaye pachi
    settting.py : 'DIRS': [os.path.join(BASE_DIR,'cryptoc','templates')],
    url.py : urlpatterns = path('crypto/', index),
    and add "from cryptoc.views import aboutus"

    note: view.py > template> url.py

> run in browser


#APIs
https://api.github.com/users/hisanto
https://api.coinmarketcap.com/v1/ticker/
https://simpleisbetterthancomplex.com/references/2016/06/21/date-filter.html
https://docs.djangoproject.com/en/2.1/ref/templates/builtins/#capfirst


#BLOG NEW APP
>python manage.py startapp Blog
>if DB related 6 bhane setting ma app add garne
>models.py ma  DB related class banaune
>python manage.py makemigrations
>python manage.py  migrate
>admin.py ma
    from .models import Post, Comment  # added to display in admin url
    admin.site.register(Post) # added to post in "http://localhost:8000/admin/"
    admin.site.register(Comment)
> python manage.py createsuperuser


DB ORM QUERY: from basic in console
>python manage.py shell
> from blog.models import Post
> all_post = Post.objects.all()
>all_posts.count()
>print(all_posts.query) # to see the query

>published_post = Post.objects.filters(is_published = True)
>published_post.count()

>post_by_user_1 = Post.objects.filter(author_id = 1)
>post_by_user_1.count()

>post_by_user_2 = Post.objects.filter(author_id=2 , is_published=True) # AND (,)
>print(published_post.query() # to see the query

>contains_blog_word = Post.objects.filter(body__contains='blog') # double underscore
>contains_blog_word.count()
>type(contains_blog_word)
>list(contains_blog_word)

>from django.db.models import Q # to query OR
>com = Post.objects.filter(Q(title__contains ='blog') | Q(body__contains='test'))
>print(com.query)

>Post.objects.filter(published_date__year=2018, published_date__month=9)

>Post.objects.filter(author_id=1).exclude(is_published=Flase).
filter(published_date__month__gte =10)

>p=Post.objects.all()[:2] # limit 2

>Post.objects.order_by('published_date') # ascending order
>Post.objects.order_by('-published_date') # - descending order
>Post.objects.all().first() # first record
>Post.objects.all().last()  #last record
>Post.objects.filter(title__exact='blog') # exact tile must be '<fddh>'
>Post.objects.filter(title__iexact='blog') # case insensetive exact
>Post.objects.filter(author__id__in=[1,2])

Django

